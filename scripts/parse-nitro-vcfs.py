# This script extracts some data from vehicle configuration files (VCFs) and vehicle definition files (VDFs) from Nitro Pack.
# It generates a table in Markdown format containing some basic info.
# It assumes that the VCFs and VDFs have already been extracted from the game's nitro.zfs file and placed in type-specific folders.

import os

VCF_FOLDER = "C:/nitro-pack/unzfs/nitro-ZFS-contents/VCFs"
VDF_FOLDER = "C:/nitro-pack/unzfs/nitro-ZFS-contents/VDFs"

VCF_EXTENSION = ".vcf"

VCF_NAME_OFFSET = 28
VCF_NAME_LENGTH = 16

VCF_VDF_OFFSET = 44
VCF_VDF_LENGTH = 13

VDF_NAME_OFFSET = 28
VDF_NAME_LENGTH = 20

files = os.listdir(VCF_FOLDER)

rows = []

for file in files:
    if not file.endswith(VCF_EXTENSION):
        continue
    
    with open(os.path.join(VCF_FOLDER, file), 'rb') as file:
        vcf_data = file.read()

    file_name = os.path.basename(file.name)

    variant_name = vcf_data[VCF_NAME_OFFSET:VCF_NAME_OFFSET+VCF_NAME_LENGTH].split(b"\x00")[0].decode('ascii', 'replace')
    
    referenced_vdf = vcf_data[VCF_VDF_OFFSET:VCF_VDF_OFFSET+VCF_VDF_LENGTH].split(b"\x00")[0].decode('ascii', 'replace')

    if os.path.exists(os.path.join(VDF_FOLDER, referenced_vdf)):
        with open(os.path.join(VDF_FOLDER, referenced_vdf), 'rb') as file:
            vdf_data = file.read()

        vdf_name = vdf_data[VDF_NAME_OFFSET:VDF_NAME_OFFSET+VDF_NAME_LENGTH].split(b"\x00")[0].decode('ascii', 'replace')
    else:
        vdf_name = "*Referenced VDF doesn't exist*"

    rows.append(f"`{file_name}` | {variant_name} | `{referenced_vdf}` | {vdf_name}\n")

OUT_PATH = "nitro-vcf-list.md"

with open(OUT_PATH, 'w') as out:

    out.write("# VCFs in nitro.zfs (Nitro Pack ZFS Archive File)\n\n")
    out.write("Generated by `parse-nitro-vcfs.py`.\n\n")

    out.write("VCF Name | Variant Name | Referenced VDF | Vehicle Name\n")
    out.write("---|---|---|---\n")
    out.writelines(rows)

print(f"Wrote {OUT_PATH}")
